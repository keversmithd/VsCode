#include <iostream>
#include <vector>
#include <cmath>
//remmeber to do back prop
using namespace std;

typedef vector<double> Vector;
typedef vector<Vector> Matrix;

void swap_rows(Matrix& A, Vector& b, int i, int j) {
    swap(A[i], A[j]);
    swap(b[i], b[j]);
}

void gaussian_elimination(Matrix& A, Vector& b) {
    int n = A.size();

    for (int i = 0; i < n; i++) {
        // Partial Pivoting
        int max_row = i;
        for (int j = i + 1; j < n; j++) {
            if (abs(A[j][i]) > abs(A[max_row][i])) {
                max_row = j;
            }
        }
        if (max_row != i) {
            swap_rows(A, b, i, max_row);
        }

        // Gaussian elimination
        for (int j = i + 1; j < n; j++) {
            double factor = A[j][i] / A[i][i];
            for (int k = i; k < n; k++) {
                A[j][k] -= factor * A[i][k];
            }
            b[j] -= factor * b[i];
        }
    }

    // Back substitution
    Vector x(n);
    for (int i = n - 1; i >= 0; i--) {
        double sum = 0.0;
        for (int j = i + 1; j < n; j++) {
            sum += A[i][j] * x[j];
        }
        x[i] = (b[i] - sum) / A[i][i];
    }

    // Output the solution
    cout << "Solution:\n";
    for (int i = 0; i < n; i++) {
        cout << "x[" << i << "] = " << x[i] << "\n";
    }
}

int main() {
    Matrix A = {{2, 1, -1},
                {-3, -1, 2},
                {-2, 1, 2}};
    Vector b = {8, -11, -3};

    gaussian_elimination(A, b);

    return 0;
}